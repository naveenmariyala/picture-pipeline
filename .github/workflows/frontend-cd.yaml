name: FE Conitnuous Deployment Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths: "starter/frontend/**"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: node-modules-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: cd ./starter/frontend && npm ci

      - name: Code Quality
        run: cd ./starter/frontend && npm run lint -- --fix

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: node-modules-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: cd ./starter/frontend && npm ci

      - name: Run tests
        run: cd ./starter/frontend && npm test

  build:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: node-modules-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: cd ./starter/frontend && npm ci

      - name: Create environment variable
        run: echo "REACT_APP_MOVIE_API_URL=http://ae045d39638ee4683a6a61237c04eb73-621531224048.us-east-1.elb.amazonaws.com" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up ECR login
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build docker image with SHA
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: cd ./starter/frontend && docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

      - name: Push docker image to ECR
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: cd ./starter/frontend && docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name cluster --region us-east-1


      - name: Set image tag to newer version
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: cd ./starter/frontend/k8s && kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy application to EKS cluster
        run: cd ./starter/frontend/k8s && kustomize build | kubectl apply -f - 